import argparse
import json
import os
import numpy as np
import sys
import math
import matplotlib
matplotlib.use('pdf')
matplotlib.rc('figure', figsize=(8, 5))
import matplotlib.pyplot as plt
import cPickle as pickle

from histogram import Histogram
from plot_utils import add_plot_options

parser = argparse.ArgumentParser(description='Plot histogram for all pickle file in directory generated by \
        hist_maker.py with each subjet pt slice one plot')
parser.add_argument('--dir', type=str, nargs=1,
        help='Directory of pickle files of one variable, generated by hist_maker.py', required=True)
parser.add_argument('--xlabel', type=str, nargs=1, help='Histogram x-axis label', required=True)
parser.add_argument('--ylabel', type=str, nargs=1, help='Histogram y-axis label', required=True)
parser.add_argument('--config', type=str, nargs=1, help='Config file to use (JSON)', required=True)
parser.add_argument('--output', type=str, nargs=1, help='Output directory name', required=True)
'''
parser.add_argument('--title', type=str, nargs=1, help='Histogram title', required=True)
parser.add_argument('--fname', type=str, nargs=1, help='File name', required=True)
'''

directory = args.dir[0]
os.mkdir(args.output[0])

with open(args.config[0]) as f:
    config = json.load(f)
mjpt_bins = config['pt_bins']['mjet']
nmjpt_bins = config['pt_bins']['nmjet']

for name in os.listdir(directory):
    print 'Processing: %s...' % (name)
    with open(os.path.join(directory, name), 'rb') as f:
        hist = pickle.load(f)

    pt_label = '_'.join(name.split('_')[:4])
    flavor_label = name.split('_')[5]
    if pt_label = 'l' + mjpt_bins[0] + 'l' + nmjpt_bins[0]:
        plt.figure(1)
        plt.plot(hist.bins(), hist.frequencies(), '+', label=name.split('_')[0])
    elif pt_label = 'l' + mjpt_bins[0] + 'g' + nmjpt_bins[0] + 'l' + nmjpt_bins[1]:
        plt.figure(2)
    elif pt_label = 'l' + mjpt_bins[0] + 'g' + nmjpt_bins[1]:
        plt.figure(3)
    elif pt_label = 'g' + mjpt_bins[0] + 'l' + mjpt_bins[1] + 'l' + nmjpt_bins[0]:
        plt.figure(4)
    elif pt_label = 'g' + mjpt_bins[0] + 'l' + mjpt_bins[1] + 'g' + nmjpt_bins[0] + 'l' + nmjpt_bins[1]:
        plt.figure(5)
    elif pt_label = 'g' + mjpt_bins[0] + 'l' + mjpt_bins[1] + 'g' + nmjpt_bins[1]:
        plt.figure(6)
    elif pt_label = 'g' + mjpt_bins[1] + 'l' + nmjpt_bins[0]:
        plt.figure(7)
    elif pt_label = 'g' + mjpt_bins[1] + 'g' + nmjpt_bins[0] + 'l' + nmjpt_bins[1]:
        plt.figure(8)
    else pt_label = 'g' + mjpt_bins[1] + 'g' + nmjpt_bins[1]:
        plt.figure(9)

plt.legend()
plt.xlabel(args.xlabel[0])
plt.ylabel(args.ylabel[0])
plt.ticklabel_format(axis='x', style='sci', scilimits=(0,0))
plt.yscale('log')
plt.title(args.title[0])
plt.savefig(args.fname[0]+'.png') 
print "Done!!!"

